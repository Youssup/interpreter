; ex1603.a  Constructors
startup:  bl main
          halt 
;==============================================================
                           ; #include <iostream>
                           ; using namespace std;
                           ; class A
                           ; {
                           ;    public:
                           ;       A(int n);
                           ;       void display();
                           ;    protected:   
                           ;       int x;
                           ; };

@A@A$i:   push lr          ; A::A(int n)
          push fp          ; {          
          mov fp, sp
                           
          ldr r0, fp, 3    ;    x = n;
          ldr r1, fp, 2
          str r0, r1, 0
                           
          mov sp, fp       ; }
          pop fp
          pop lr
          ret

@A@display$v:              ; void A::display()
          push lr          ; {                
          push fp
          mov fp, sp
                           
          ldr r0, fp, 2    ;    cout << x << endl;
          ldr r0, r0, 0
          dout r0
          nl
                           
          mov sp, fp       ; }
          pop fp
          pop lr
          ret
;==============================================================
                           ; class B: public A
                           ; {
                           ;    public:
                           ;       B(int n, int m);
                           ;       void display();
                           ;    private:
                           ;       int y;
                           ; };

@B@B$ii:  push lr          ; B::B(int n, int m): A(n)
          push fp          ; {
          mov fp, sp
                           
          ldr r0, fp, 3
          push r0
          ldr r0, fp, 2
          push r0
          bl @A@A$i
          add sp, sp, 2
                           
          ldr r0, fp, 4    ;    y = m;
          ldr r1, fp, 2
          str r0, r1, 1
                           
          mov sp, fp       ; }
          pop fp
          pop lr
          ret

@B@display$v:              ; void B::display()
          push lr          ; {                
          push fp
          mov fp, sp
                           
          ldr r0, fp, 2    ;    cout << x << " " << y << endl;
          ldr r0, r0, 0
          dout r0
          mov r0, ' '
          aout r0
          ldr r0, fp, 2
          ldr r0, r0, 1
          dout r0
          nl
                           
          mov sp, fp       ; }
          pop fp
          pop lr
          ret
;==============================================================
main:     push lr          ; int main() 
          push fp          ; {          
          mov fp, sp
                           
          sub sp, sp, 1    ;    A *aptr;
          sub sp, sp, 1    ;    B *bptr;

          sub sp, sp, 1    ;    A a(1);
          mov r0, 1
          push r0
          add r0, fp, -3
          push r0
          bl @A@A$i
          add sp, sp, 2
          add r0, fp, -3
          push r0
          bl @A@display$v
          add sp, sp, 1

          sub sp, sp, 2    ;    B b(2, 3)
          mov r0, 3
          push r0
          mov r0, 2
          push r0
          add r0, fp, -4
          push r0
          bl @B@B$ii
          add sp, sp, 3

          add r0, fp, -4
          push r0
          bl @B@display$v
          add sp, sp, 1
                           
          mov r1, 1        ;    aptr = new A(4);
          bl malloc 
          str r0, fp, -1

          mov r0, 4
          push r0
          ldr r0, fp, -1
          push r0
          bl @A@A$i
          add sp, sp, 2
                           
          ldr r0, fp, -1   ;    aptr->display();
          push r0
          bl @A@display$v
          add sp, sp, 1
                           
          mov r1, 2        ;    bptr = new B(5, 6);
          bl malloc
          str r0, fp, -2

          mov r0, 6
          push r0
          mov r0, 5
          push r0
          ldr r0, fp, -2
          push r0
          bl @B@B$ii
          add sp, sp, 3
                           
          ldr r0, fp, -2   ;    bptr->display();
          push r0
          bl @B@display$v
          add sp, sp, 1
                           
          mov r0, 0        ;    return 0;
          mov sp, fp
          pop fp
          pop lr
          ret

malloc:   ld r0, @avail
          add r1, r0, r1
          st r1, @avail
          ret                           
@avail:   .word @avail+1   ; }
