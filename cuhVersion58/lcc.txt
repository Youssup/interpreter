           LCC Assemble/Link/Interpret/Debug
                      Version 5.8
         Copyright (c) 2019, 2021 by Anthony J. Dos Reis

DISCLAIMER 
----------

The files in this software package are provided to you on an "as 
is" basis for instructional purposes only, without any 
warranties, expressed or implied. The author and copyright holder 
of these files shall not be liable in any event for incidental, 
consequential, special, or punitive damages in connection with, 
or arising out of the distribution, performance, or use of these 
files. 


Software package for C and C++ Under the Hood (1st and 2nd editions)
--------------------------------------------------------------------
New in version 5.8: Fixed several minor bugs

New m1, m2 macs now supported.

New in version 5.7 of lcc: lcc can now be invoked by double clicking
on its icon.

Note: This version of the software is appropriate for BOTH the
1st and 2nd editions of the textbook (the new ISA at the assembly 
level is backward compatible with the ISA of the 1st edition).

The software package contains the lcc program for Windows, Mac OS 
X, Linux, and Raspbian. It also contains all the programs that 
appear in the book. The files have the following extensions: 

.a     asm program
.an    numbered asm program (for easy line references in the classroom)
.c     C program
.cn    numbered C program (for easy line references in the classroom)
.cpp   C++ program
.cpn   numbered C++ program (for easy line references in the classroom)
.o     object module
.bin   binary machine code as a text file
.hex   hex machine code as a text file
.e     executable file
.txt   documentation
.docx  Word file

Files whose names start with "ex" are examples from the book. 
Files whose names start with "c" are C programs that appear in 
the chapter-end problems. Files whose names start with "cpp" are 
C++ programs that appear in the chapter-end problems. Files whose 
names contain "test" are the test programs for the system 
programming projects from Chapter 18. Files whose names contain 
"shell" are the partially completed C programs for the system 
programming projects in Chapter 18. 


Which lcc file to use
---------------------

Windows:        lcc.exe or lccwin.exe (lcc.exe and lccwin.exe are
                identical)

Mac:            lcc or lccmac (lcc and lccmac are identical)
m1, m2 Mac:     lccm12

Linux:          lcclnx or lcclnx64

Raspbian:       lccrasp             

Other programs named in the same way as the lcc program (i.e., with
suffixes mac, lnx, and rasp that specify the OS):

   micro:       microassembles LCC symbolic microcode
   micro.txt:   documentation

   sim:         simulates LCC using new microcode
   sim.txt:     documentation

   tiny:        assembles tiny assembly language programs
   tiny.txt:    documentation
   t.sm:        symbolic microcode (not complete) for tiny instruction set
   ttest.a:     test program for tiny instruction set microcode t.m
   ttest.hex    test program in hex form for tiny instruction set

   basic:       assembles basic assembly language programs
   basic.txt:   documentation
   b.m:         binary microcode for basic instruction set (not provided)
   btest.a:     test program for basic instruction set microcode b.m
   btest.hex    test program in hex form for basic instruction set

   h2b:         coverts machine language in hex form to binary
   h2b.txt      documentation

   comment:     converts each line of a C/C++ file to an assembly
                language comment. Assembly code can then be added
                with the corresponding C code as comments already
                in place.
   comment.txt: documentation


Installation of sofware package
-------------------------------

After downloading cuh.zip (the software package), unzip it to a 
directory named "cuh" on your Desktop. The directory does not 
have to be named "cuh" nor does it have to be on the Desktop. 
However, the directions below on running the lcc program assume 
the software package directory is named "cuh" and is on the 
Desktop. If it is not, then make the necessary modifications in 
the directions below. 

On a Mac OS X, Linux, or Raspbian system, position computer on 
your cuh directory when running the Terminal program. Then enter

chmod 755 *

to give executable permissions to your executable files.


Running the lcc program
-----------------------

Start the command line program. To do this,  

     on Windows, start the "Command Prompt" program 

     on Mac, Linux, or Raspberry, start the "Terminal" program. 

Your computer should be positioned just above the Desktop 
directory. Change to the Desktop directory by entering 

cd Desktop                   (be sure to capitalize D)

Then change to the cuh directory which should be just below the 
Desktop directory by entering

cd cuh

If you are using Linux or Raspbian and want to use the name 
"lcc" (rather than lcclnx or lccrasp) to invoke the lcc program, 
copy the executable file to "lcc" by entering on the command line 

   cp lcclnx lcc     (on Linux)
   cp lccrasp lcc    (on Raspbian)

Suppose you want to run the lcc program on the input file named 
"ex0301.a". Then enter on the command line 

./lcc ex0301.a         (on Mac, Linux, or Raspbian)

lcc ex0301.a           (on Windows)

If you do not want to prefix "lcc" with "./" when invoking lcc on 
Mac OS X, Linux, and Raspbian, you have to make a modification to 
the PATH environment variable. For directions on how to do this, 
see the section below. 

When you invoke the lcc program, it expects an input file. If an 
input file is not specified, lcc immediately terminates. That is 
the reason why lcc immediately terminates if you invoke it by 
double clicking on it with your mouse. Double clicking on the lcc 
file invokes it but does not provide an input file. Thus, lcc 
terminates immediately. 


Optional
--------

The operating systems Mac OS X, Linux, and Raspberry by default do 
not have the current directory in the PATH environment variable. 
So if you invoke a program in your current directory, the OS will 
not find it. 

Solution: Prefix each program invocation with "./" ("." 
represents the current directory). For example, 

./lcc ex0301.a

Better Solution: Put the current directory in the PATH
environment variable.

Note: Windows always searches the current directory in addition 
to every directory in the PATH environment variable. So no 
modification of the PATH variable is required for a Windows 
system. 

To put the current directory in the PATH environment variable,
start the Terminal program. Enter

     nano .bash_profile

to create the file .bash_profile. Then enter

     PATH=.:$PATH
     export PATH

Enter control-X to exit from nano. Enter y when prompted. 
If .bash_profile already exists, then add the two lines 
above to the beginning of the file.

If the .bash_profile file does not already exist, enter at the
command line,

     chmod 755 .bash_profile

This commands makes .bash_profile executable.

If the OS still cannot find a program in the current directory
without the "./" prefix, then repeat the above sequence but with
the file

     .bashrc


Changes in Version 5.2
----------------------

Fixed bugs in the sin, or, xor instructions.

Modified the jmp instruction so it now includes conditional
jumps exactly like the conditional branch instructions. For 
example, jmp is an unconditional jump but jmpz is jump on zero.


Changes in Version 5.1
----------------------

The instruction set has been expanded and improved. Added rol, 
ror, mul, div, rem, or, xor. 

The offset6 field added to the bl and jmp (ret) instructions. If 
omitted in an assembly language instruction, offset6 defaults to 
0. 

The instruction cea (compute effective address) has been added. It
converts an offset relative to the base address in fp to a 16-bit
effective address. The cea instruction has the following format:

   cea <register>, offset

The cea instruction is translated to an add machine instruction.
For example, the following cea instruction

   cea r0, -5      ; load r0 with effective address for offset -5

is translated to the same machine instruction as

   add r0, fp, -5

The mnemonics bl (branch and link) and call added (equivalent to jsr).
The mnemonic blr (branch and link register) added (equivalent to jsrr).

The shift instructions now take two arguments--the register to 
be shifted and the shift count (i.e., the number of positions to 
shift). If the shift count is omitted in an assembly language 
instruction, it defaults to 1. For example, 

     srl r0

is equivalent to

     srl r0, 1

The input/output trap instructions now take one argument: the 
register to use for the I/O operation. If the register argument 
is omitted in an assembly language I/O trap instruction, it 
defaults to r0. For example, 

     dout 

is equivalent to

     dout r0

On a possible infinite loop (after 500,000 instructions executed), 
the debugger is activated rather than terminating program.

Trace facility now displays settings of the flag registers, as
well as changes to regs and memory.

Fixed bug with shift instructions.

Fixed bug with bp instruction.

Fixed bug with g debugger command.

Fixed bug in brc instruction.

Fixed bug in executable file produced by lcc for a ".bin" and 
".hex" input file.

gcc-type directives, .asciz (equivalent to .stringz), .globl 
(equivalent to .global), .string (equivalent to .stringz)
.word (equivalent to .fill), and .zero (equivalent to .blkw)
are now supported.

Can now use either the label _start or the .start directive to 
specify the entry point.

A label can now be terminated with a colon, in which case it does 
not have to start in column 1. If, however, a label is not 
terminated with a colon, then it must start in column 1. 

sin instruction now echoes input to .lst and .bst files.

Fixed bug that affected string constants with embedded blanks.

Executable and object files now start with the signature 'o'.


Changes in Version 3.2
----------------------

Fixed bug in w debugger command.

Renumbered trap vectors so that they start from 0. For example, 
halt is now f000, not f025.

Shift operations are now performed by shift instructions--not 
trap instructions. 



For format information on the modified trap and shift 
instructions, see LCCInstSetSummary.pdf. 


Linking
-------

An assembly language file that has any .global or .extern 
directives is assumed to be a module that must be linked. For 
such a module, lcc outputs an object file (with extension ".o") 
rather than an executable file (with extension ".e"). 

To create an executable file from multiple object files that make 
up a program, enter the names of the object files (include the 
".o" extension) on the command line when invoking lcc. For 
example, to create an executable file from the assembly language 
files startup.a, m1.a, and m2.a, first assemble them by 
entering 
                  
lcc startup.a            (creates startup.o)
lcc m1.a                 (creates m1.o)
lcc m2.a                 (creates m2.o)

Then link the object modules by entering

lcc startup.o m1.o m2.o  (creates executable file link.e)


Entering your name
------------------

The first time the lcc program is run, it prompts for your name.
Enter your name. Your name will then appear in the .lst and .bst
files that lcc creates. If you want to change your name as it
appears in the .lst and .bst files, edit the text file name.nnn.


Command Line Arguments
----------------------

When lcc is invoked and the input file is not an ".o" object
module, the following optional arguments can be specified, in any
order:

      -d debugger on, instruction trace on, step count set to 1
      -f full list files. Lines in .lst and .bst files not truncated.
      -h help screen
      -l<load point> (hex is assumed, for decimal prefix with #)
      -m memory dump at the end
      -o<outputfilename>  Use specified name rather than default name.
      -r register dump at the end
      -t instruction trace on

If an output file name is not specified with the -o argument,
then the output file base name defaults to the base name as the input
file.

For a link, if an output file name is not specified with the -o
command line argument, it defaults to link.e.

The lcc program supports programmer-specified entry points (with
the .start directive), load point specification (with the -L
command line argument), and linking. Machine code files (files
with the ".e" or ".o" extension) start with a header, which
contains fields of information that permit linking of separately-
assembled modules. Specifically the header contains the following
entries, depending on the specifics of the assembly language
program:

     A entry
          'A'
          Location in module of a 16-bit local address

     E entry
          'E'
           Location in module of a pcoffset11 external reference
           External label as a null-terminated string

     e entry
          'e'
          Location in module of pcoffset9 external reference
          External label as a null-terminated string

     G entry
          'G'
          Location in module of global label
          Global label as a null-terminated string

     S entry
          'S'
          Location in module of the entry point

     V entry
          'V'
          Location in module of 16-bit external reference

     C entry
          Marks end of the header and the beginning of the machine code


Assembler directives that support linking (they can appear
anywhere in the source file):

     .global <label>  (can also use .globl <label>)
          Makes the specified label within the module visible to other
          modules.

     .extern <label>
          Indicates that the specified label is an external label.

     .start  <label>
          Indicates that the specified label is the entry point for
          the linked program. Can also specify the entry point with
          the _start label within the assembly language program.

For example, the object module file corresponding to

     .global a
     .global b
     .extern sub
     .extern x
     .start s
s:   bl sub
     ld  r0,x
     dout
     halt
a:   .word b
b:   .word 100
c:   .word x

contains the following header and machine code:

Header:
S  0000          (indicates entry point of the module)
E  0000  sub     (indicates pcoffset11 external ref to sub at location 0000)
e  0001  x       (indicates pcoffset9 external ref to x at location 1)
G  0004  a       (indicates a is global, and its location is 4)
A  0004          (indicates 16-bit local address is at location 4)
G  0005  b       (indicates b is global, and its location is 5)
V  0006  x       (indicates 16-bit external ref to x at location 6)
C

Code:
0000: 4800  2000  f027  f025  0005  0064  0000


Input files
-----------

Four types of input files--corresponding to four forms of an
lcc program--are handled by lcc:

      1) ASCII hex text file (must have ".hex" extension). 
         Executable programs created from ".hex" files are not 
         relocatable. That is, they work correctly only if the 
         load point is 0. 
         
      2) ASCII binary text file (must have ".bin" extension)
         Executable programs created from ".bin" files are not 
         relocatable. That is, they work correctly only if the 
         load point is 0. 

      3) assembler code file (any file except those with
         ".hex", ".bin", ".e" , or ".o" extensions)

      4) machine code file (must have the ".e", or ".o" extension).

For files types 1, 2, and 3, a one-line comment starts with a
semicolon.

If the input files are object modules (i.e., their names have an
".o" extension), the lcc program links them and outputs an
executable file with the extension ".e". The default name for the
executable file on a link is link.e.


Output files
------------

Output files are created for types 1, 2, and 3. Three files are
created with the following extensions when lcc performs an
assembly and/or an interpretation:

   1) .e    binary code in little endian format if the input file
            is a complete program, or

      .o    binary code in endian format if the input file is not
            a complete program.

   2) .lst  time stamp, student's name, hex and source listing, and
            the output from the run.

   3) .bst  time stamp, student's name, binary and source listing, and
            the output from the run.

When lcc performs a link, it outputs an ".e" executable file.


Labels
------

A label is a string that starts with a letter, '_', '$', or '@',
and is followed by zero or more occurrences of letters, '_', '$',
'@', and digits.

Labels must start in column 1 if they are not followed by a colon. 
If followed by a colon, they can start in any column.

Labels are case sensitive.

In lcc assembly language programs, a label cannot be of the form
of a decimal, hex, or binary number. 

A label can be on an otherwise blank line. Such a label is
treated as the label on the next line for which code is
generated. For example, the following is legal (all three labels
correspond to the ld instruction):

L1:
L2:
L3:      ld   r0, x

A label in the position of an operand can be followed by a
plus or minus sign and an offset.  For example,

     ld  r0, x+3
     lea r0, x-5
     br sub+5

An asterisk can occupy the position within an instruction or
directive normally occupied with a label. Such an asterisk means
the current address (i.e., the address of the location in which
it appears). For example, the following ld instruction loads from
2 words following it.

     ld   r0, *+2

Thus, if the ld instruction is at location 3000, it loads from
location 3002.


Constants in assembly language programs
---------------------------------------

A constant starting with "#" is a decimal constant. A constant
starting with a decimal digit but not "0x" or "0b" is a decimal
constant. For example, the following instruction are both legal
and add decimal 5 to r0:

     add r0, r0, #5
     add r0, r0, 5

A constant starting with "0x" (upper or lower case) is a hex
constant.

A constant starting with "0b" (upper or lower case) is a binary
constant.

A hex constant with fewer than 4 digits is zero extended to 4
digits.

A binary constant with fewer than 16 bits is zero extended
to 16 bits.

A constant starting with a single quote, is a character constant.
The constants 1 and '1' have different representations:

     1:  0000000000000001    (binary for 1)
    '1': 0000000000110001    (ASCII for '1')

Embedded spaces are allowed in a binary constant in a ".bin"
input file but not in an assembly language file.

The plus and minus signs can be used with decimal constants only.


Register aliases
----------------

The names "fp" (frame pointer), "sp" (stack pointer), and "lr"
(link register) can be used interchangeably with r5, r6, and r7,
respectively.


Trap service routines
---------------------

The lcc program supports the following trap service routines:

 Vector  Mnemonic              Description
   0      halt           terminate program
   1      nl             output newline to display
   2      dout  reg      output reg in decimal to display
   3      udout reg      output reg in unsigned decimal to display
   4      hout  reg      output reg in hex to display
   5      aout  reg      output ASCII character in reg to display
   6      sout  reg      display string reg points to
   7      din   reg      input dec number from keyboard into reg
   8      hin   reg      input hex number from keyboard into reg
   9      ain   reg      input character from keyboard into reg
   a      sin   reg      like sin but for input
   b      m              display memory
   c      r              display registers
   d      s              display stack
   e      bp             software breakpoint

For hin, the number should be entering without a "x" or "0x"
prefix. For ain, the character should be entered without any quotes.

The trap I/O instructions can specify the register to be used for
the I/O operation. If omitted, the register defaults to r0. 

The mnemonic "trap" can be used, in which case a trap vector must be
specified. For example,

     trap 2         ; dout instruction which displays r0 contents
     trap r3, 2     ; dout instruction which displays r3 contents


.orig Directive
---------------

The .orig resets the location to a higher value. For example, if
the following .orig directive appears at location x3010,

     .orig x3020

then the location is reset to x3020. The locations from x3010 to
x301f are padded with 0's.


Alternate mnemonics
-------------------

bral is equivalent to br (branch always, unconditional branch)
bre is equivalent to brz (branch on equal, branch on zero)
brne is equivalent to brnz (branch on not equal, branch on nonzero)
brb is equivalent to brc (branch on below, branch on carry)


Debugger commands
-----------------

The prompt message the debugger displays is the mnemonic of the
instruction to executed next. To see the entire instruction,
enter the i command.

Numbers entered in debugger commands are assumed to be in hex.
For example, the debugger command

     m 3000 10

displays 10 (hex) words starting from the address 3000 hex.
If an argument can be an address (in the form of a label or a
number), a hex number that starts with a letter must be preceded
by "0x". A binary number must be preceded by "0b" else it is 
treated as a hex number. For
example, in

     m a 10

the lcc argument a is treated as a label--not a hex number. To 
display 10 (binary) words starting from adddress 0xa, enter

     m 0xa 0b10

The base of a number entered can be explicitly specified by
prefixing a decimal number with #, and hex number with 0x and a
binary number with 0b. For example,

     m #3000 0x10

displays 16 (decimal) words starting at the address 3000
(decimal).

If the -d command line argument is specified when lcc is invoked,
the lcc program pauses when the interpretation of the assembled
program is about to start. In addition, the trace function is
turned on, and the step count is set to 1. Thus, each time the
Enter key is hit, lcc executes and traces one instruction.

At any pause, any of the following commands can be entered:

     Hit Enter key
          Run, pausing each time step count number of instructions
          is executed and at breakpoints.

     Integer n

         Set step count to n, and then execute n instructions.
         For example, if 5 is entered, then lcc executes five
         instructions and then pauses. Each time the Enter key
         is subsequently hit, lcc executes five instructions and
         then pauses. In this command only, n without a prefix
         specifying the base is treated as a decimal number.

     b <label>  sets a breakpoint at the specified label, replacing
                the current breakpoint, if any. Execution pauses at
                the specified label.

     b <address>  sets a breakpoint at the specified address,
                  replacing the current breakpoint, if any.
                  Execution pauses at the specified address.

     b   cancel the current breakpoint.

     b-  cancel the current breakpoint.

     c   change a value in a register or a memory location.

     g   set step count to infinity and run, pausing only at
         breakpoints and watchpoints, if any.

     h   help screen

     i   displays instruction to be executed next.

     m   memory display.

     q   quit program.

     r   register display.

     s   display stack (displays locations starting from the top
         of the stack to 0xffff. s works correctly only if the
         initial value of r6 is 0 (so the first push goes into
         location 0xffff).

     t   toggles trace off and on on (trace is off on startup
         unless -t or -d is specified on the command line). For
         each instruction executed, the trace displays the
         instruction executed and its effect. For example, if an
         instruction changes r0 from 3 to 5, the trace output
         for that instruction will include

               <r0 = 3/5>

         which shows the before and after values in r0.

     t-  turn instruction trace off.

     w<label>  sets watchpoint at specified label. Execution pauses
               if a store to the specified label occurs.

     w<address>  sets watchpoint at specified address. Execution pauses
                 if a store to the specified address occurs.

     w   cancel the current watchpoint.

     w-  cancel the current watchpoint.

     z   set step count to infinity and run to the end of the
         program, ignoring breakpoints and watchpoints

The m command can take a label or an address. For example,

     m x

displays only the contents of the word at the label x.

     m 3000

displays only the contents of location 3000 (hex).

     m #3000

displays only the contents of 3000 (decimal).

If a second argument is included on an m command, it specifies
the number of words to be displayed.  For example,

     m x 5

displays five words starting from the label x. To display all the
words from x to the end of the program, use a large number for
the second argument in the m command.

The r command can take a register name or number as an argument.
For example,

     r r7     (or "r 7" or "r7")

displays only r7. "r" by itself displays the n, z, p flags and
all the registers.

The c command changes a value in a register or a memory location.
The c command requires a register name and a value, or a memory
label/address and a value:

     c <regname> <value>
or
     c <addr> <value>

For example, to write 123 to r1, enter at the command prompt

     c r1 123

To write 123 to location 1000, enter

    c 1000 123

The b, c, m, r, and w commands do not require a space preceding the
first argument.  For example, the following commands are legal:

     m3000  (or m 3000)
     mx     (or m x where x is a label in the program)
     r3     (or r 3)
     rr3    (or r r3)
     b3000  (or b 3000)
     bloop  (or b loop where loop is a label in the program)
     cr1 5  (or w r1 5)
     w100   (or w 100)
     wx     ( or w x where x is a label in the program


If -d (debugger on) is specified on the command line, the step
count is initially 1, and the trace function is on. Thus, each
time the Enter key is hit, lcc executes and traces one
instruction, and then pauses. You can change the step count at
any pause. For example, if you want lcc to execute 5 instructions
each time you hit the Enter key, then enter 5 at a pause. Then
subsequently each time you hit the Enter key, 5 instructions are
executed. If you enter g at a pause, the step count is set to
infinity.

A label in the b, c, m, or w commands can be suffixed with + or -
followed by an integer offset.  For example,

     b loop+4

sets a breakpoint at the location 4 words after the location
corresponding to loop. When using an offset, do not embed
whitespace in the location expression.  For example,

     m loop +4 10

displays 4 locations starting from loop--not 10 locations
starting from loop+4. To do the latter, enter

     m loop+4 10


Changing path (not essential to do this)
-------------

To avoid having to prefix lcc with "./" on a Mac OS X, Linux, or 
Raspbian system,

     1) Position your computer on your home directory by
        entering on the command line

             cd

     2) Insert the following two lines at the beginning of the
        .bash_profile file in your home directory (or create
        the file if it does not exist):

        PATH=.:$PATH
        export PATH

        Exit and restart the terminal program. If the prefix "./"
        is still required after modifying .bash.profile, then repeat
        the modification, but for the file

             .bashrc
