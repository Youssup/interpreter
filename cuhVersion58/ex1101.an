  1 ; ex1101.a  Multiplication (optimized)
  2 startup:  bl main
  3           halt
  4 ;==============================================================
  5                            ; #include <stdio.h>
  6 slowmul:  ; r1 is x        ; int slowmul(int x, unsigned int y)
  7           ; r2 is y        ; {
  8 
  9           ; r0 is product
 10           mov r0, 0        ;    int product = 0;
 11 
 12 @L0:      and r2, r2, r2   ;    while (y)          
 13           brz @L1          ;    {
 14 
 15           add r0, r0, r1   ;       product = product + x;
 16                            
 17           sub r2, r2, 1    ;       y--;
 18                            
 19           br @L0           ;    }
 20 @L1:
 21           ret              ;    return product;
 22                            ; }
 23 ;==============================================================
 24 mul:      ; r1 is x        ; int mul(int x, unsigned int y)
 25           ; r2 is y        ; {
 26 
 27           ; r0 is product
 28           mov r0, 0        ;    int product = 0;
 29 
 30 @L2:      and r2, r2, r2   ;    while (y)
 31           brz @L3          ;    {
 32                             
 33           and r3, r2, 1    ;       if (y & 1)
 34           brz @L4
 35                             
 36           add r0, r0, r1   ;          product = product + x;
 37                        
 38 @L4:      ; shift right y  ;       y = y >> 1;
 39           srl r2, 1
 40           ; shift left x   ;       x = x << 1;
 41           sll r1, 1
 42 
 43           br @L2           ;    }
 44                            
 45 @L3:      ret              ; }
 46 ;==============================================================
 47 main:     push lr          ; int main()
 48           push fp          ; {
 49           mov fp, sp
 50                            
 51           mov r1, 7        ;    printf("%d\n", slowmul(7, 255));
 52           mov r2, 255
 53           bl slowmul
 54           dout r0
 55           nl
 56                             
 57           mov r1, 7        ;    printf("%d\n", mul(7, 255));
 58           mov r2, 255
 59           bl mul
 60           dout r0
 61           nl
 62                            
 63           mov r0, 0        ;    return 0;
 64           mov sp, sp
 65           pop fp
 66           pop lr
 67           ret
 68                            ; }
